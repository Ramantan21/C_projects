programm: count digits
int digit_sum(int n){
    int sum = 0;
    while(n > 0){
        int digit = n % 10;
        n = n / 10;
        sum += digit;
    }
    return sum;
}

int main(void){


    int number;
    printf("Give me number: ");
    scanf("%d",&number);
    int sum = digit_sum(number);

    fprintf("Digit sum is: %d",sum);
    
}

int  sum(int n)
{
    int sum = 0;
    for(int i = 1; i < 100; i++){
        sum += i;
    }
    return sum;
}

void basel(){
    double sum = 0.0;
    double current_term;
    for(int i = 1; i <= 100; i++){
        current_term = 1.0 / (i*i);
        sum += current_term;
    }

    printf("Sum of the series: %.10f\n",sum);
    
}

void pi_approx()
{
    long long i = 1;
    double sum = 0.0;
    double current_term;
    do{
        current_term = 1.0 / (i * i);
        sum += current_term;
        i++;
    }while(current_term >= 1e-15);
    double pi = sqrt(6 * sum);
    printf("Pi aprox is: %.10f\n",pi);
}

void eta_two(){
    int terms;
    double sum = 0.0;
    int i;
    double current_term;
        for(i = 1; i < terms; i++){
            current_term = pow(-1,i-1) / (i*i);
            sum += current_term;
        }
        printf("Sum is : %.6f\n",sum);
    }


void harmonic(int terms){
    double sum = 0.0;
    double current_term;
    int i;
    for( i = 1; i < terms; i++){
        current_term = pow(-1, i+1) / i;
        sum += current_term;
    }
    printf("Sum of the series is : %.8f\n",sum);
}

int main(){
   int terms;
   if(scanf("%d",&terms) == 1){
    harmonic(terms);
   }
    

    return 0;
    
}
Γράψτε ένα πρόγραμμα printchar.c που να εκτυπώνει τους χαρακτήρες με ASCII κωδικό που είναι πολλαπλάσιο του 3, και μεταξύ 33 και 105, μαζί με τους κωδικούς τους σε δεκαδική και δεκαεξαδική μορφή. Το πρόγραμμά σας θέλουμε να τυπώνει σε κάθε γραμμή έναν χαρακτήρα, ακολουθούμενο από τον δεκαδικό και τον δεκαεξαδικό κωδικό του. Παράδειγμα εκτέλεσης ακολουθεί:

int main(){

    for(int i = 33; i <= 105; i++){
        if(i % 3 == 0){
            printf("%c - (dec: %d, hex: %2x)\n",i,i,i);
        }
        
    }

   
   return 0;
}
increment pyramid
 μονο με putchar('*')
 int rows, incerement;
    printf("Enter the number of rows: ");
    scanf("%d",&rows);
    printf("Enter the increment of stars per row: ");
    scanf("%d",&incerement);
    for(int i = 1 ,stars = 1; i <= rows; i++, stars +=incerement){
        for(int j = 0; j < stars; j++ ){
            putchar('*');
        }
     putchar('\n');
    }
    
    
    return 0;

Μετατροπη χαρακτηρα σε κεφαλαιο ή μικρο
  int ch;
    ch = getchar();

    while(ch != EOF){
        if(ch >= 'A' && ch <= 'Z'){
            ch = ch -('A' - 'a');
        }else
        if(ch >= 'a' && ch <= 'z'){
            ch = ch -('a'- 'A');
        }
        putchar(ch);
        ch = getchar();
    }
    return 0;

    int ch1,ch2;

   ch1 = getchar();

   while(ch1 != EOF){
    ch2 = getchar();
    if(isxdigit(ch1) && isxdigit(ch2)) {
        int decoded_char = (ch1 <= '9' ? ch1-'0' :toupper(ch1) - 'A' + 10)*16 + 
        (ch2 <= '9' ? ch2 - '0' : toupper(ch2) - 'A' + 10);
        putchar(decoded_char);
    }

    ch1 = getchar();

   }
   return 0;


   Διαφορα σε goodb και badf pointers:
   void badf(int x, int y, int sum, int diff)
{
    sum = x + y;
    diff = x - y;
}

void goodf(int *x,int *y,int *sum,int *diff){
    *sum = *x + *y;
    *diff = *x - *y;
}

int main(){
    int a,b,sum,diff;

    printf("Give me integer a: ");
    scanf("%d",&a);
    printf("Give me integer b: ");
    scanf("%d",&b);
    sum = 0;
    diff = 0;

    goodf(&a,&b,&sum,&diff);
    printf("sum is: %d diff is: %d\n",sum,diff);

    return 0;
}

Το κοσκινο του ερατοσθενη:
#include <stdio.h>
#include <stdlib.h>


#define SIZE 50

int main()
{
    int A[SIZE + 1];
    int i;
    for(i = 2; i < SIZE - 1; i++)
    {
        A[i] = 1;
    }
    for( i = 2; i < SIZE - 1 ; i++){
        if(A[i] != 0){
            for(int j= 2*i; j < SIZE; j+=i){
                A[j] = 0;
            }
        }
        if(A[i] == 1){
            printf("%d ", i);
        }
    }
    printf("\n");
    

    return 0;
}


pointers:
int main(){
    int a[8],*pa;
    for(int i = 0; i < 8; i++){
        a[i] = i*i;
    }
    print_array(a,8);

    pa = &a[0];
    a[6] = *(a+4);
    print_array(a,8);
    *(pa + 3) = a[5];
    print_array(a,8);
    a[0] = *((pa++) + 2);
    print_array(a,8);
    *((++pa)+5) = a[1];
    print_array(a,8);
    *(&a[5]-1)= *(--pa);
    print_array(a,8);
    return 0;
}
0       1       4       9       16      25      36      49
0       1       4       9       16      25      16      49
0       1       4       25      16      25      16      49
4       1       4       25      16      25      16      49
4       1       4       25      16      25      16      1
4       1       4       25      1       25      16      1

δυναμικοι πινακες υπολογισμος average,και print:
int print_array(int array[],int N){
    for(int i = 0; i< N; i++){
        printf("%d\t",array[i]);
    }
    printf("\n");
}
int print_average(int array[],int N){
    double avg = 0;
    int sum = 0;
    for(int i = 0; i< N; i++)
    {
        sum+=array[i];
    }
    avg = (double)sum / N;
    printf("Avg is: %.2f",avg);
    return avg;
}
int main(){
    int n;
    printf("Give the lenght of the array:");
    if(scanf("%d",&n) != 1 || n <= 0){
        printf("Error wrong input for size:");
        return -1;
    }
    int *array = malloc(n*sizeof(int));
    if(array == NULL){
        printf("Memory allocation failed\n");
        free(array);
        return 1;
    }
    printf("Give me the integers to store in array:");
    for(int i = 0; i<n; i++){
        if(scanf("%d",&array[i])!= 1){
        printf("Error: wrong input for integers:\n");
        free(array);
        return 1;
    }
        
    }
    printf("array elements: \n");
    print_array(array,n);
    print_average(array,n);
    free(array);

    return 0;
}


int convert_binary(int n)
{
    int num = n;
    int dec_value = 0;
    int base = 1;
    int tmp = num;
    while(tmp)
    {
        int last_digit = tmp % 10;
        tmp = tmp / 10; //removing the last digit from the binary number

        dec_value += last_digit*base;
        base = base *2;
    }

    return dec_value;

}

string is palindrome: char* strrev(char *str){
    int lenght = strlen(str);

    char *rev = (char*)malloc(sizeof(char) * (lenght+1));

    for(int i = 0; i < lenght; i++)
    {
        rev[i] = str[lenght -i -1];
    }
    rev[lenght] = '\0';

    return rev;
}

void ispalindrome(char *str)
{
    char *rev = strrev(str);

    if(strcmp(rev,str) == 0)
    {
        printf("\"%s\" is palindrome.\n",str);
    }
    else
        printf("\"%s\" is not palindrome.\n",str);

}


int main()
{
    ispalindrome("abbba");
    ispalindrome("madam");
    ispalindrome("hello");


    return 0;
}


SOS: how to print only the first character of a string:
char print(char *str)
{
    int first = 1;

    for(int i=0; str[i] != '\0'; i++){
        if(str[i] != ' ' &&  first){
            printf("%c ",str[i]);
            first = 0;
        }
        if(str[i] == ' ')
        {
            first = 1;
        }

    }
}


int main()
{
    print("hello madam how are you");

    return 0;
}


reverse a string using recursion:// Function to reverse string using recursion
void revRecursive(char *l, char *r) {
  
      // Till two pointers do not meet, 
     // swap the values they point to
    if (l != r) {
        char c = *l;
        *l = *r;
        *r = c;
      
          // Recursive call
        revRecursive(l + 1, r - 1);
    }
}

// Wrapper function
void rev(char *s) {

    // Calling the recursive function
    revRecursive(s, s + strlen(s) - 1);
}

int main() {
    char s[] = "GeeksforGeeks";

    // Reversing the string s
    rev(s);

    printf("%s", s);
    return 0;
}



#include <stdio.h>
#include <stdlib.h>
#include <string.h>



//ελεγχος για το αν ο χαρακτηρας ειανι αλφαριθμητικος:

int myisalnum(char c)
{
    if((c >= '0' && c <= '9')||(c >= 'A' && c <= 'Z')||(c >= 'a' && c<= 'z'))
    {
        return 1;
    }
    return 0;
}

void wordcount(void)
{
    int inword =0;
    long wc = 0;
    long totallenght = 0;
    long currentlenght = 0;
    int ch;
    while((ch =getchar()) != EOF)
    {
        if(myisalnum(ch))
        {
            if(!inword){
                inword = 1;
                currentlenght = 0;
            }
        currentlenght++;
        }else{
            if(inword){
                wc++;
                totallenght+=currentlenght;
                inword = 0;
            }
        }
    }
    if(inword)
    {
        wc++;
        totallenght += currentlenght;
    }
    printf("Total words: %ld\n",wc);
    if(wc> 0 )
    {
        double avlenght = (double)totallenght / wc;
        printf("Average word lenght : %.2f\n",avlenght);
    }else
        printf("Average word lenght: 0.00\n");
}

int main(void)
{
    wordcount();
    return 0;
}
